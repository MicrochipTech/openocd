if { [info exists CHIPNAME] } {
   set _CHIPNAME $CHIPNAME
} else {
   set _CHIPNAME pic32mx
}

if { [info exists ENDIAN] } {
   set _ENDIAN $ENDIAN
} else {
   set _ENDIAN little
}

if { [info exists CPUTAPID] } {
   set _CPUTAPID $CPUTAPID
} else {
   set _CPUTAPID 0x05FFF053
}


adapter_nsrst_delay 1000
jtag_ntrst_delay 1000

reset_config trst_and_srst separate

#jtag scan chain
#format L IRC IRCM IDCODE (Length, IR Capture, IR Capture Mask, IDCODE)
jtag newtap $_CHIPNAME cpu -irlen 5 -expected-id $_CPUTAPID

set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME mips_m4k -endian $_ENDIAN -chain-position $_TARGETNAME

# use onboard 640k sram as working area
$_TARGETNAME configure -work-area-phys 0x88000000 -work-area-size 134217728

$_TARGETNAME configure -event reset-init { }

$_TARGETNAME configure -event gdb-attach { }

proc DDR_init {} {

	halt
	# DDRCMD PMD Unlock
	mww 0xBF8000A0  0x00000000  ;#PMD7

	# PLL INIT
	mww 0xBF800100  0x0A003203 ;#CFGMPLL
	#wait ((Data.Long(0xBF800100)&0x80800000)==0x80800000)
	sleep 100
	# PHY INIT

	mww 0xBF8E9124  0x30001000 ;#DDRPHYDLLR
	mww 0xBF8E9120  0x50EE62E3 ;#DDRPHYPADCON
	mww 0xBF8E9118  0x01000053 ;#DDRSCLCFG0
	mww 0xBF8E911C  0x00000401 ;#DDRSCLCFG1
	mww 0xBF8E910C  0x00000043 ;#DDRSCLLAT

	# MEM_WIDTH
	mww 0xBF8E8050  0x08   ;#MEM_WIDTH

	# Arbiter
	mww 0xBF8E8000  0x00000000   ;#ARB_AGENT_SEL
	mww 0xBF8E8004  0x0000001F   ;#MIN_LIMIT
	mww 0xBF8E8000  0x00000000   ;#ARB_AGENT_SEL
	mww 0xBF8E8008  0x000000FF   ;#RQST_PERIOD
	mww 0xBF8E8000  0x00000000   ;#ARB_AGENT_SEL
	mww 0xBF8E800C  0x00000004   ;#MIN_CMD_ACPT

	mww 0xBF8E8000  0x00000005   ;#ARB_AGENT_SEL
	mww 0xBF8E8004  0x0000001F   ;#MIN_LIMIT
	mww 0xBF8E8000  0x00000008   ;#ARB_AGENT_SEL
	mww 0xBF8E8008  0x000000FF   ;#RQST_PERIOD
	mww 0xBF8E8000  0x00000008   ;#ARB_AGENT_SEL
	mww 0xBF8E800C  0x00000010   ;#MIN_CMD_ACPT

	mww 0xBF8E8000 0x0000000A   ;#ARB_AGENT_SEL
	mww 0xBF8E8004  0x0000001F   ;#MIN_LIMIT
	mww 0xBF8E8000  0x00000010   ;#ARB_AGENT_SEL
	mww 0xBF8E8008  0x000000FF   ;#RQST_PERIOD
	mww 0xBF8E8000  0x00000010   ;#ARB_AGENT_SEL
	mww 0xBF8E800C  0x00000010   ;#MIN_CMD_ACPT

	mww 0xBF8E8000  0x0000000F   ;#ARB_AGENT_SEL
	mww 0xBF8E8004  0x00000004   ;#MIN_LIMIT
	mww 0xBF8E8000  0x00000018   ;#ARB_AGENT_SEL
	mww 0xBF8E8008  0x000000FF   ;#RQST_PERIOD
	mww 0xBF8E8000  0x00000018   ;#ARB_AGENT_SEL
	mww 0xBF8E800C  0x00000004   ;#MIN_CMD_ACPT

	mww 0xBF8E8000  0x00000014   ;#ARB_AGENT_SEL
	mww 0xBF8E8004  0x00000004   ;#MIN_LIMIT
	mww 0xBF8E8000  0x00000020   ;#ARB_AGENT_SEL
	mww 0xBF8E8008  0x000000FF   ;#RQST_PERIOD
	mww 0xBF8E8000  0x00000020   ;#ARB_AGENT_SEL
	mww 0xBF8E800C  0x00000004   ;#MIN_CMD_ACPT

	# Address config
	mww 0xBF8E8014  0x20000a0d   ;#MEM_CONFIG_1
	mww 0xBF8E8018  0x00001FFF   ;#MEM_CONFIG_2
	mww 0xBF8E801C  0x00000000   ;#MEM_CONFIG_3
	mww 0xBF8E8020  0x000003FF   ;#MEM_CONFIG_4
	mww 0xBF8E8024  0x00000007   ;#MEM_CONFIG_5

	# Refresh config
	mww 0xBF8E8028  0x07180616   ;#REF_CONFIG

	# Power config
	mww 0xBF8E802C  0x00011080   ;#PWR_SAVE_ECC_CONFIG [DA]

	# Delay config
	mww 0xBF8E8030  0x04112467   ;#DLY_CONFIG1

	mww 0xBF8E8034  0x00016202   ;#DLY_CONFIG2

	mww 0xBF8E8038  0x06229303   ;#DLY_CONFIG3

	mww 0xBF8E803C  0x00090B08   ;#DLY_CONFIG4

	# ODT config
	mww 0xBF8E8040  0x00000000   ;#ODT_CONFIG
	mww 0xBF8E804C  0x00010000   ;#ODT_EN_CONFIG
	mww 0xBF8E8040  0x00121200   ;#ODT_CONFIG

	mww 0xBF8E8044  0x73020042   ;#DATA_XFR_CONFIG [DA]

	# DRAM init
	# bring CKE high after reset and wait 400 nsec
	mww 0xBF8E8080  0x00FFFFFF   ;#HOST_CMD1
	mww 0xBF8E80C0  0x0004F000   ;#HOST_CMD2

	# issue precharge all command
	mww 0xBF8E8084  0x00FFF401   ;#HOST_CMD1
	mww 0xBF8E80C4  0x00002004   ;#HOST_CMD2

	# initialize EMR2
	mww 0xBF8E8088  0x00FFF001   ;#HOST_CMD1
	mww 0xBF8E80C8  0x00000200   ;#HOST_CMD2

	# initialize EMR3
	mww 0xBF8E808C  0x00FFF001   ;#HOST_CMD1
	mww 0xBF8E80CC  0x00000300   ;#HOST_CMD2

	# RDQS disable, DQSB enable, OCD exit, 150 ohm termination, AL=0, DLL enable
	mww 0xBF8E8090  0x40FFF001   ;#HOST_CMD1
	mww 0xBF8E80D0  0x00000100   ;#HOST_CMD2

	# PD fast exit, WR REC = tWR in clocks -1, DLL reset, CAS = RL, burst = 4
	mww 0xBF8E8094  0x52FFF001   ;#HOST_CMD1
	mww 0xBF8E80D4  0x0000000B   ;#HOST_CMD2

	# issue precharge all command
	mww 0xBF8E8098  0x00FFF401   ;#HOST_CMD1
	mww 0xBF8E80D8  0x00002004   ;#HOST_CMD2

	# issue refresh command
	mww 0xBF8E809C  0x00FFF801   ;#HOST_CMD1
	mww 0xBF8E80DC  0x00018800   ;#HOST_CMD2

	# issue refresh command
	mww 0xBF8E80A0  0x00FFF801   ;#HOST_CMD1
	mww 0xBF8E80E0  0x00018800   ;#HOST_CMD2

	# Mode register programming as before without DLL reset
	mww 0xBF8E80A4  0x53FFF001   ;#HOST_CMD1
	mww 0xBF8E80E4  0x0000000A   ;#HOST_CMD2

	# extended mode register same as before with OCD default
	mww 0xBF8E80A8  0xC0FFF001   ;#HOST_CMD1
	mww 0xBF8E80E8  0x00000103   ;#HOST_CMD2

	# extended mode register same as before with OCD exit
	mww 0xBF8E80AC  0x40FFF001   ;#HOST_CMD1
	mww 0xBF8E80EC  0x00045100   ;#HOST_CMD2

	mww 0xBF8E8048  0x0000001B   ;#HOST_CMD_ISSUE
	mww 0xBF8E8010  0x00000001   ;#MEM_START

	#wait ((Data.Long(0xBF8E8000+0x48)&0x10)!=0x10)

	mww 0xBF8E8010  0x00000003   ;#MEM_START


	# SCL INIT
	mww 0xBF8E9100  0x14000000 ;#DDRSCLSTART
	#wait ((Data.Long(0xBF8E9100) & 0x03)==0x03)
	sleep 100
}



gdb_breakpoint_override hard
gdb_flash_program disable
gdb_memory_map enable
#gdb_report_data_abort enable
#gdb_target_description enable
#gdb_save_tdesc enable
